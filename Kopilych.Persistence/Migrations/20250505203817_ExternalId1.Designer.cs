// <auto-generated />
using System;
using Kopilych.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kopilych.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250505203817_ExternalId1")]
    partial class ExternalId1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Kopilych.Domain.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Kopilych.Domain.PiggyBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Goal")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("GoalDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Shared")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("PiggyBanks");
                });

            modelBuilder.Entity("Kopilych.Domain.PiggyBankCustomization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("TEXT");

                    b.Property<int>("PiggyBankId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PiggyBankTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PiggyBankId")
                        .IsUnique();

                    b.HasIndex("PiggyBankTypeId");

                    b.ToTable("PiggyBankCustomizations");
                });

            modelBuilder.Entity("Kopilych.Domain.PiggyBankType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PiggyBankTypes");
                });

            modelBuilder.Entity("Kopilych.Domain.PremiumUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PremiumUsers");
                });

            modelBuilder.Entity("Kopilych.Domain.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PiggyBankId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PiggyBankId");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Kopilych.Domain.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("Kopilych.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Kopilych.Domain.UserFriendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApproverUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("InitiatorUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequestApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApproverUserId");

                    b.HasIndex("InitiatorUserId", "ApproverUserId")
                        .IsUnique();

                    b.ToTable("UserFriendships");
                });

            modelBuilder.Entity("Kopilych.Domain.UserPiggyBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HideBalance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PiggyBankId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Public")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PiggyBankId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPiggyBanks");
                });

            modelBuilder.Entity("Kopilych.Domain.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Kopilych.Domain.PiggyBank", b =>
                {
                    b.HasOne("Kopilych.Domain.User", "Owner")
                        .WithMany("PiggyBanks")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Kopilych.Domain.PiggyBankCustomization", b =>
                {
                    b.HasOne("Kopilych.Domain.PiggyBank", "PiggyBank")
                        .WithOne("Customization")
                        .HasForeignKey("Kopilych.Domain.PiggyBankCustomization", "PiggyBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kopilych.Domain.PiggyBankType", "PiggyBankType")
                        .WithMany()
                        .HasForeignKey("PiggyBankTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PiggyBank");

                    b.Navigation("PiggyBankType");
                });

            modelBuilder.Entity("Kopilych.Domain.PremiumUser", b =>
                {
                    b.HasOne("Kopilych.Domain.User", "User")
                        .WithOne()
                        .HasForeignKey("Kopilych.Domain.PremiumUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kopilych.Domain.Transaction", b =>
                {
                    b.HasOne("Kopilych.Domain.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kopilych.Domain.PiggyBank", "PiggyBank")
                        .WithMany()
                        .HasForeignKey("PiggyBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kopilych.Domain.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kopilych.Domain.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");

                    b.Navigation("PiggyBank");

                    b.Navigation("TransactionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kopilych.Domain.UserFriendship", b =>
                {
                    b.HasOne("Kopilych.Domain.User", "ApproverUser")
                        .WithMany("FriendshipsAsApprover")
                        .HasForeignKey("ApproverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kopilych.Domain.User", "InitiatorUser")
                        .WithMany("FriendshipsAsInitiator")
                        .HasForeignKey("InitiatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApproverUser");

                    b.Navigation("InitiatorUser");
                });

            modelBuilder.Entity("Kopilych.Domain.UserPiggyBank", b =>
                {
                    b.HasOne("Kopilych.Domain.PiggyBank", "PiggyBank")
                        .WithMany("Members")
                        .HasForeignKey("PiggyBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kopilych.Domain.User", "User")
                        .WithMany("UserPiggyBankRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PiggyBank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kopilych.Domain.UserSession", b =>
                {
                    b.HasOne("Kopilych.Domain.User", "User")
                        .WithOne("Session")
                        .HasForeignKey("Kopilych.Domain.UserSession", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kopilych.Domain.PiggyBank", b =>
                {
                    b.Navigation("Customization")
                        .IsRequired();

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Kopilych.Domain.User", b =>
                {
                    b.Navigation("FriendshipsAsApprover");

                    b.Navigation("FriendshipsAsInitiator");

                    b.Navigation("PiggyBanks");

                    b.Navigation("Session")
                        .IsRequired();

                    b.Navigation("Transactions");

                    b.Navigation("UserPiggyBankRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
